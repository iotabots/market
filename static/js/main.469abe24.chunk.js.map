{"version":3,"sources":["components/Navigation.tsx","components/Footer.tsx","config.js","pages/Home.tsx","pages/Create.tsx","pages/MyNFTs.tsx","components/wallet/connectors.tsx","pages/Profile.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PrimarySearchAppBar","React","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleMobileMenuClose","handleMenuClose","renderMenu","Menu","anchorOrigin","vertical","horizontal","id","keepMounted","transformOrigin","open","onClose","MenuItem","onClick","mobileMenuId","renderMobileMenu","style","color","isActive","to","IconButton","target","href","size","aria-label","Badge","badgeContent","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","noWrap","component","display","xs","sm","className","md","aria-controls","aria-haspopup","event","currentTarget","Album","Copyright","align","Link","Date","getFullYear","bgcolor","p","gutterBottom","nftmarketaddress","nftaddress","Home","useState","nfts","setNfts","loadingState","setLoadingState","loadNFTs","a","provider","ethers","providers","JsonRpcProvider","tokenContract","Contract","NFT","abi","marketContract","Market","fetchMarketItems","data","Promise","all","map","i","tokenURI","tokenId","tokenUri","axios","get","meta","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","items","console","log","reverse","nft","web3Modal","Web3Modal","connect","connection","Web3Provider","signer","getSigner","contract","parseUnits","createMarketSale","value","transaction","wait","useEffect","length","CircularProgress","CssBaseline","Container","py","maxWidth","Grid","container","spacing","index","Card","height","flexDirection","CardMedia","alt","CardContent","paragraph","CardActions","disableSpacing","justifyContent","Button","buyNft","Games","client","ipfsHttpClient","url","navigate","useNavigate","loading","setLoading","loadingMessage","setLoadingMessage","fileUrl","setFileUrl","formInput","updateFormInput","e","file","files","add","progress","prog","added","path","JSON","stringify","createSale","createToken","tx","events","args","getListingPrice","listingPrice","createMarketItem","direction","alignItems","m","margin","noValidate","autoComplete","Input","disabled","placeholder","onChange","type","width","src","MyNFTs","network","cacheProvider","fetchMyNFTs","listNFT","injected","InjectedConnector","supportedChainIds","iotabotsContractAddress","Profile","useWeb3React","active","account","library","connector","activate","deactivate","loadBots","content","bots","setBots","callback","err","x","currentProvider","IOTABOTS_ABI","walletOfOwner","token_index","metadata_url","metadata","ex","padding","textAlign","substring","bot","dna","edition","date","toLocaleDateString","getLibrary","Web3","App","theme","createTheme","typography","fontFamily","palette","primary","light","main","dark","contrastText","secondary","ThemeProvider","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"uysFAae,SAASA,IAAuB,IAAD,EACVC,WAAmC,MADzB,mBACnCC,EADmC,KACzBC,EADyB,OAGtCF,WAAmC,MAHG,mBAEnCG,EAFmC,KAEfC,EAFe,KAKpCC,EAAaC,QAAQL,GACrBM,EAAmBD,QAAQH,GAM3BK,EAAwB,WAC1BJ,EAAsB,OAGpBK,EAAkB,WACpBP,EAAY,MACZM,KAQEE,EACF,eAACC,EAAA,EAAD,CACIV,SAAUA,EACVW,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,GARO,8BASPC,aAAW,EACXC,gBAAiB,CACbJ,SAAU,MACVC,WAAY,SAEhBI,KAAMb,EACNc,QAASV,EAbb,UAeI,cAACW,EAAA,EAAD,CAAUC,QAASZ,EAAnB,qBACA,cAACW,EAAA,EAAD,CAAUC,QAASZ,EAAnB,2BAIFa,EAAe,qCACfC,EACF,eAACZ,EAAA,EAAD,CACIV,SAAUE,EACVS,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,GAAIO,EACJN,aAAW,EACXC,gBAAiB,CACbJ,SAAU,MACVC,WAAY,SAEhBI,KAAMX,EACNY,QAASX,EAbb,UAeI,cAACY,EAAA,EAAD,UACI,cAAC,IAAD,CACII,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAEnCC,GAAG,IALV,oBASJ,cAACP,EAAA,EAAD,UACI,cAAC,IAAD,CACII,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCC,GAAG,UANP,0BAUJ,cAACP,EAAA,EAAD,UACI,cAAC,IAAD,CACII,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCC,GAAG,UANP,sBAUJ,cAACP,EAAA,EAAD,UACI,cAAC,IAAD,CACII,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCC,GAAG,WANP,uBAUJ,cAACP,EAAA,EAAD,UAGI,cAACQ,EAAA,EAAD,CACIC,OAAO,SACPC,KAAK,+BACLC,KAAK,QACLC,aAAW,oBACXP,MAAM,UALV,SAOI,cAACQ,EAAA,EAAD,CAAOC,aAAc,EAAGT,MAAM,QAA9B,SACI,cAAC,IAAD,aAOpB,OACI,eAACU,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,UACI,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CACIC,QAAQ,KACRC,QAAM,EACNC,UAAU,MACVR,GAAI,CAAES,QAAS,CAAEC,GAAI,QAASC,GAAI,UAJtC,SAMI,cAAC,IAAD,CACIC,UAAU,WAAWrB,GAAG,IAD5B,wBAKJ,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,KACrB,cAACF,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAAC,IAAD,CACIzB,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCsB,UAAU,WAAWrB,GAAG,IAN5B,oBAUJ,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,eAGA,cAACd,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAAC,IAAD,CACIzB,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCsB,UAAU,WAAWrB,GAAG,UAN5B,0BAUJ,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,eAGA,cAACd,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAAC,IAAD,CACIzB,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCsB,UAAU,WAAWrB,GAAG,UAN5B,sBAUJ,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,eAGA,cAACd,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAAC,IAAD,CACIzB,MAAO,YACH,MAAO,CACHC,MAFiB,EAAfC,SAEgB,UAAY,KAGtCsB,UAAU,WAAWrB,GAAG,WAN5B,uBAUJ,cAACQ,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAACrB,EAAA,EAAD,CAAYC,OAAO,SAASC,KAAK,+BAA+BC,KAAK,QAAQC,aAAW,UAAUP,MAAM,UAAxG,SACI,cAACQ,EAAA,EAAD,CAAOC,aAAc,EAAGT,MAAM,QAA9B,SACI,cAAC,IAAD,UAIZ,cAACU,EAAA,EAAD,CAAKC,GAAI,CAAES,QAAS,CAAEC,GAAI,OAAQG,GAAI,SAAtC,SACI,cAACrB,EAAA,EAAD,CACIG,KAAK,QACLC,aAAW,YACXkB,gBAAe5B,EACf6B,gBAAc,OACd9B,QA1LK,SAAC+B,GAC1BhD,EAAsBgD,EAAMC,gBA0LR5B,MAAM,UANV,SAQI,cAAC,IAAD,aAKfF,EACAb,K,cChOE,SAAS4C,IAEpB,SAASC,IACL,OACI,eAACd,EAAA,EAAD,CAAYC,QAAQ,QAAQjB,MAAM,iBAAiB+B,MAAM,SAAzD,UACK,kBACD,cAACC,EAAA,EAAD,CAAMhC,MAAM,UAAUK,KAAK,IAA3B,yBAEQ,KACP,IAAI4B,MAAOC,cACX,OAKb,OACI,eAACxB,EAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,mBAAoBC,EAAG,GAAKjB,UAAU,SAA1D,UACI,cAACH,EAAA,EAAD,CAAYC,QAAQ,KAAKc,MAAM,SAASM,cAAY,EAApD,+BAGA,eAACrB,EAAA,EAAD,CACIC,QAAQ,YACRc,MAAM,SACN/B,MAAM,iBACNmB,UAAU,IAJd,0BAMiB,mBAAGd,KAAK,+BAAR,wBAEjB,cAACyB,EAAD,O,gKCjCCQ,EAAmB,6CACnBC,EAAa,6C,kBCyBX,SAASC,IAAO,MAGHC,mBAAqB,IAHlB,mBAGpBC,EAHoB,KAGdC,EAHc,OAIaF,mBAAS,cAJtB,mBAIpBG,EAJoB,KAINC,EAJM,cAQZC,IARY,2EAQ3B,oCAAAC,EAAA,6DACUC,EAAW,IAAIC,IAAOC,UAAUC,gBAAgB,gCAGhDC,EAAgB,IAAIH,IAAOI,SAASd,EAAYe,EAAIC,IAAKP,GACzDQ,EAAiB,IAAIP,IAAOI,SAASf,EAAkBmB,EAAOF,IAAKP,GAL7E,SAOuBQ,EAAeE,mBAPtC,cAOUC,EAPV,gBASwBC,QAAQC,IAAIF,EAAKG,IAAL,uCAAS,WAAOC,GAAP,qBAAAhB,EAAA,sEACdK,EAAcY,SAASD,EAAEE,SADX,cAC/BC,EAD+B,gBAElBC,IAAMC,IAAIF,GAFQ,cAE/BG,EAF+B,OAGjCC,EAAQrB,IAAOsB,MAAMC,YAAYT,EAAEO,MAAMG,WAAY,SACrDC,EAAO,CACPJ,QACAL,QAASF,EAAEE,QAAQU,WACnBC,OAAQb,EAAEa,OACVC,MAAOd,EAAEc,MACTC,MAAOT,EAAKV,KAAKmB,MACjBC,KAAMV,EAAKV,KAAKoB,KAChBC,YAAaX,EAAKV,KAAKqB,aAXU,kBAa9BN,GAb8B,2CAAT,wDATpC,OASUO,EATV,OAyBIC,QAAQC,IAAI,OAAQF,GACpBtC,EAAQsC,EAAMG,WACdvC,EAAgB,UA3BpB,6CAR2B,kEAsC3B,WAAsBwC,GAAtB,2BAAAtC,EAAA,6DAEImC,QAAQC,IAAI,MAAOE,GAEbC,EAAY,IAAIC,IAJ1B,SAK6BD,EAAUE,UALvC,cAKUC,EALV,OAMUzC,EAAW,IAAIC,IAAOC,UAAUwC,aAAaD,GAC7CE,EAAS3C,EAAS4C,YAClBC,EAAW,IAAI5C,IAAOI,SAASf,EAAkBmB,EAAOF,IAAKoC,GAC7DrB,EAAQrB,IAAOsB,MAAMuB,WAAWT,EAAIf,MAAMG,WAAY,SAThE,UAW8BoB,EAASE,iBAAiBxD,EAAY8C,EAAIpB,QAAS,CACzE+B,MAAO1B,IAZf,eAWU2B,EAXV,OAcIf,QAAQC,IAAI,cAAec,GAd/B,UAeUA,EAAYC,OAftB,QAgBIpD,IAhBJ,6CAtC2B,sBAyD3B,OApDAqD,qBAAU,WACNrD,MACD,IAkDkB,WAAjBF,GAA8BF,EAAK0D,OAClB,eAAjBxD,EAAyC,yCAAG,yCAAgB,cAACyD,EAAA,EAAD,OAG5D,qCACI,cAACC,EAAA,EAAD,IACA,iCAEI,eAACC,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,UACI,cAACzF,EAAA,EAAD,CACIG,UAAU,KACVF,QAAQ,KACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,mCAUA,cAACqE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKlE,EAAKoB,KAAI,SAACuB,EAAKwB,GAAN,OACN,cAACH,EAAA,EAAD,CAAMhC,MAAI,EAAarD,GAAI,GAAIC,GAAI,EAAGE,GAAI,EAA1C,SACI,eAACsF,EAAA,EAAD,CACInG,GAAI,CAAEoG,OAAQ,OAAQ3F,QAAS,OAAQ4F,cAAe,UAD1D,UAGI,cAACC,EAAA,EAAD,CACI9F,UAAU,MACVR,GAAI,GAIJmE,MAAOO,EAAIP,MACXoC,IAAI,YAER,eAACC,EAAA,EAAD,CAAaxG,GAAI,CAAEC,SAAU,GAA7B,UACI,cAACI,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,KAAKE,UAAU,KAAhD,SACKkE,EAAIN,OAET,cAAC/D,EAAA,EAAD,CAAYoG,WAAS,EAArB,SACK/B,EAAIL,cAET,uBACA,uBACA,uBACA,cAAChE,EAAA,EAAD,CAAYoG,WAAS,EAArB,oBAGA,eAACpG,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,KAAKE,UAAU,KAAhD,UACKkE,EAAIf,MADT,eAIJ,cAAC+C,EAAA,EAAD,CAAaC,gBAAc,EAA3B,SACI,eAAC5G,EAAA,EAAD,CACIU,QAAQ,OACRmG,eAAe,gBACfhG,UAAU,cAHd,UAMI,cAACiG,EAAA,EAAD,CAAQ5H,QAAS,kBAnH9B,2CAmHoC6H,CAAOpC,IAAMpE,QAAQ,WAAWX,KAAK,QAA5D,iBACA,cAACH,EAAA,EAAD,CAAYC,OAAO,SAASC,KAAI,+CAA0CgF,EAAIP,MAA9C,yEAAoHO,EAAIpB,SAAW3D,KAAK,QAAQC,aAAW,UAAUP,MAAM,UAA3M,SACI,cAAC,IAAD,eAvCJ6G,WAkD5B,cAACN,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,SACI,cAACzF,EAAA,EAAD,CAAYe,MAAM,SAASM,cAAY,EAACpB,QAAQ,SAASE,UAAU,KAAnE,SACI,cAAC,IAAD,CAASjB,GAAG,UAAZ,+DAzEmC,yD,+BC3D5C,SAASwH,IACpB,IAAMC,EAASC,iBAAe,CAAEC,IAAK,uCAC/BC,EAAWC,cAFW,EAIEtF,oBAAS,GAJX,mBAIrBuF,EAJqB,KAIZC,EAJY,OAKgBxF,mBAAS,IALzB,mBAKrByF,EALqB,KAKLC,EALK,OAME1F,mBAAwB,MAN1B,mBAMrB2F,EANqB,KAMZC,EANY,OAOS5F,mBAAS,CAAE6B,MAAO,GAAIS,KAAM,GAAIC,YAAa,KAPtD,mBAOrBsD,EAPqB,KAOVC,EAPU,iDAS5B,WAAwBC,GAAxB,mBAAAzF,EAAA,6DACU0F,EAAOD,EAAEpI,OAAOsI,MAAM,GADhC,kBAG4Bf,EAAOgB,IACvBF,EACA,CACIG,SAAU,SAACC,GAAD,OAAe3D,QAAQC,IAAR,oBAAyB0D,OANlE,OAGcC,EAHd,OAScjB,EATd,sCASmDiB,EAAMC,MACjDV,EAAWR,GAVnB,gDAYQ3C,QAAQC,IAAI,yBAAZ,MAZR,0DAT4B,kEAwB5B,oCAAApC,EAAA,yDACIoF,EAAkB,iBAClBF,GAAW,GACHlD,EAA6BuD,EAA7BvD,KAAMC,EAAuBsD,EAAvBtD,YAAaV,EAAUgE,EAAVhE,MACtBS,GAASC,GAAgBV,GAAU8D,EAJ5C,wDAMUzE,EAAOqF,KAAKC,UAAU,CACxBlE,OAAMC,cAAaF,MAAOsD,IAPlC,kBAU4BT,EAAOgB,IAAIhF,GAVvC,OAUcmF,EAVd,OAaQI,EAbR,sCAWmDJ,EAAMC,OAXzD,kDAeQ7D,QAAQC,IAAI,yBAAZ,MAfR,2DAxB4B,+BA2Cb+D,EA3Ca,8EA2C5B,WAA0BrB,GAA1B,qCAAA9E,EAAA,6DACUuC,EAAY,IAAIC,IAD1B,SAE6BD,EAAUE,UAFvC,cAEUC,EAFV,OAGUzC,EAAW,IAAIC,IAAOC,UAAUwC,aAAaD,GAC7CE,EAAS3C,EAAS4C,YAGpBC,EAAW,IAAI5C,IAAOI,SAASd,EAAYe,EAAIC,IAAKoC,GAP5D,SAQ4BE,EAASsD,YAAYtB,GARjD,cAQQ5B,EARR,iBASmBA,EAAYC,OAT/B,eASQkD,EATR,OAUQzH,EAAQyH,EAAGC,OAAO,GAClBrD,EAAQrE,EAAM2H,KAAK,GACnBrF,EAAU+B,EAAMrB,WACpBwD,EAAkB,kBAEZ7D,EAAQrB,IAAOsB,MAAMuB,WAAWwC,EAAUhE,MAAO,SAGvDuB,EAAW,IAAI5C,IAAOI,SAASf,EAAkBmB,EAAOF,IAAKoC,GAlBjE,UAmB6BE,EAAS0D,kBAnBtC,eAoBIC,GADIA,EAnBR,QAoBgC/E,WApBhC,UAsBwBoB,EAAS4D,iBAAiBlH,EAAY0B,EAASK,EAAO,CAAE0B,MAAOwD,IAtBvF,eAsBIvD,EAtBJ,iBAuBUA,EAAYC,OAvBtB,QAwBI+B,GAAW,GACXH,EAAS,KAzBb,6CA3C4B,sBAwE5B,OACI,qCACI,cAACxB,EAAA,EAAD,IACA,iCAEI,cAACC,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,SACI,cAACzF,EAAA,EAAD,CACIG,UAAU,KACVF,QAAQ,KACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,uCAWJ,cAACkE,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,SACI,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,QAAS,EACT8C,UAAU,MACVC,WAAW,SACXpC,eAAe,SALnB,SAQI,eAACb,EAAA,EAAD,CAAMhC,MAAI,EAACrD,GAAI,EAAf,UAEI,cAACL,EAAA,EAAD,CACIG,UAAU,IACVF,QAAQ,QACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,4DASA,uBACA,uBACA,eAAC3B,EAAA,EAAD,CACIS,UAAU,OACVR,GAAI,CACA,kBAAmB,CAAEiJ,EAAG,EAAGC,OAAQ,SAEvCC,YAAU,EACVC,aAAa,MANjB,UAQI,cAACC,EAAA,EAAD,CACIC,SAAUjC,EACVkC,YAAY,WACZ3I,UAAU,GACV4I,SAAU,SAAC3B,GAAD,OAAYD,EAAgB,2BAAKD,GAAN,IAAiBvD,KAAMyD,EAAEpI,OAAO4F,YAEzE,cAACgE,EAAA,EAAD,CACIC,SAAUjC,EACVkC,YAAY,kBACZ3I,UAAU,GACV4I,SAAU,SAAC3B,GAAD,OAAYD,EAAgB,2BAAKD,GAAN,IAAiBtD,YAAawD,EAAEpI,OAAO4F,YAEhF,cAACgE,EAAA,EAAD,CACIC,SAAUjC,EACVoC,KAAK,SACLF,YAAY,qBACZ3I,UAAU,GACV4I,SAAU,SAAC3B,GAAD,OAAYD,EAAgB,2BAAKD,GAAN,IAAiBhE,MAAOkE,EAAEpI,OAAO4F,YAE1E,cAACgE,EAAA,EAAD,CACIC,SAAUjC,EACVoC,KAAK,OACLrF,KAAK,QACLxD,UAAU,OACV4I,SA/IJ,8CAkJI/B,GACI,qBAAK7G,UAAU,eAAe2F,IAAI,SAASmD,MAAM,MAAMC,IAAKlC,IAGpE,uBACA,uBACA,eAAC1H,EAAA,EAAD,CACIU,QAAQ,OACR4F,cAAc,SACd2C,WAAW,SACXpC,eAAe,SAJnB,UAOMS,EAAU,cAAC3B,EAAA,EAAD,CAAkBrG,MAAM,UAAUM,KAAK,QAAW,KAE9D,cAACU,EAAA,EAAD,CACIG,UAAU,IACVF,QAAQ,QACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,SAOE2F,EAAUE,EAAiB,KAE7B,uBACA,cAACV,EAAA,EAAD,CAAQyC,SAAUjC,EAAS/G,QAAQ,YAAYrB,QA3KnD,2CA2K0E2B,UAAU,8DAAhF,wBAGA,uBACA,uBACA,cAACP,EAAA,EAAD,CACIG,UAAU,IACVF,QAAQ,QACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,mFC7KrB,SAASkI,IAAU,IAAD,EACP9H,mBAAqB,IADd,mBACxBC,EADwB,KAClBC,EADkB,OAESF,mBAAS,cAFlB,mBAExBG,EAFwB,KAEVC,EAFU,iDAM/B,0CAAAE,EAAA,6DACQuC,EAAY,IAAIC,IAAU,CAC9BiF,QAAS,UACTC,eAAe,IAHnB,SAK2BnF,EAAUE,UALrC,cAKQC,EALR,OAMQzC,EAAW,IAAIC,IAAOC,UAAUwC,aAAaD,GAC7CE,EAAS3C,EAAS4C,YAElBpC,EAAiB,IAAIP,IAAOI,SAASf,EAAkBmB,EAAOF,IAAKoC,GACnEvC,EAAgB,IAAIH,IAAOI,SAASd,EAAYe,EAAIC,IAAKP,GAVjE,UAWqBQ,EAAekH,cAXpC,eAWQ/G,EAXR,iBAasBC,QAAQC,IAAIF,EAAKG,IAAL,uCAAS,WAAOC,GAAP,qBAAAhB,EAAA,sEAChBK,EAAcY,SAASD,EAAEE,SADT,cACjCC,EADiC,gBAEpBC,IAAMC,IAAIF,GAFU,cAEjCG,EAFiC,OAGnCC,EAAQrB,IAAOsB,MAAMC,YAAYT,EAAEO,MAAMG,WAAY,SACrDC,EAAO,CACTJ,QACAL,QAASF,EAAEE,QAAQU,WACnBC,OAAQb,EAAEa,OACVC,MAAOd,EAAEc,MACTC,MAAOT,EAAKV,KAAKmB,OAToB,kBAWhCJ,GAXgC,2CAAT,wDAblC,QAaQO,EAbR,OA0BEtC,EAAQsC,GACRpC,EAAgB,UA3BlB,6CAN+B,kEAmC/B,WAAuBwC,GAAvB,6BAAAtC,EAAA,6DACYuC,EAAY,IAAIC,IAD5B,SAE+BD,EAAUE,UAFzC,cAEYC,EAFZ,OAGYzC,EAAW,IAAIC,IAAOC,UAAUwC,aAAaD,GAC7CE,EAAS3C,EAAS4C,YAEpBC,EAAW,IAAI5C,IAAOI,SAASd,EAAYe,EAAIC,IAAKoC,GAClDrB,EAAQrB,IAAOsB,MAAMuB,WAAW,IAAK,SAG3CD,EAAW,IAAI5C,IAAOI,SAASf,EAAkBmB,EAAOF,IAAKoC,GAVnE,UAW+BE,EAAS0D,kBAXxC,eAYMC,GADIA,EAXV,QAYkC/E,WAZlC,UAc8BoB,EAAS4D,iBAAiBlH,EAAY8C,EAAIpB,QAASK,EAAO,CAAE0B,MAAOwD,IAdjG,eAcUvD,EAdV,iBAeYA,EAAYC,OAfxB,6CAnC+B,sBA0E3B,OAvEJC,qBAAU,YAHqB,mCAI7BrD,KACC,IAqEsB,WAAjBF,GAA8BF,EAAK0D,OACpB,eAAjBxD,EAAyC,yCAAG,yCAAgB,cAACyD,EAAA,EAAD,OAG5D,qCACI,cAACC,EAAA,EAAD,IACA,iCAEI,eAACC,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,UACI,cAACzF,EAAA,EAAD,CACIG,UAAU,KACVF,QAAQ,KACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,mCAUA,cAACqE,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,SACKlE,EAAKoB,KAAI,SAACuB,EAAKwB,GAAN,OACN,cAACH,EAAA,EAAD,CAAMhC,MAAI,EAAarD,GAAI,GAAIC,GAAI,EAAGE,GAAI,EAA1C,SACI,eAACsF,EAAA,EAAD,CACInG,GAAI,CAAEoG,OAAQ,OAAQ3F,QAAS,OAAQ4F,cAAe,UAD1D,UAGI,cAACC,EAAA,EAAD,CACI9F,UAAU,MACVR,GAAI,GAIJmE,MAAOO,EAAIP,MACXoC,IAAI,YAER,eAACC,EAAA,EAAD,CAAaxG,GAAI,CAAEC,SAAU,GAA7B,UACI,cAACI,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,KAAKE,UAAU,KAAhD,SACKkE,EAAIN,OAET,cAAC/D,EAAA,EAAD,CAAYoG,WAAS,EAArB,SACK/B,EAAIL,cAET,uBACA,uBACA,uBACA,cAAChE,EAAA,EAAD,CAAYoG,WAAS,EAArB,oBAGA,eAACpG,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,KAAKE,UAAU,KAAhD,UACKkE,EAAIf,MADT,eAIJ,cAAC+C,EAAA,EAAD,CAAaC,gBAAc,EAA3B,SACI,eAAC5G,EAAA,EAAD,CACIU,QAAQ,OACRmG,eAAe,gBACfhG,UAAU,cAHd,UAMI,cAACiG,EAAA,EAAD,CAAQ5H,QAAS,kBApI5B,2CAoIkC+K,CAAQtF,IAAMpE,QAAQ,WAAWX,KAAK,QAA7D,kBACA,cAACH,EAAA,EAAD,CAAYC,OAAO,SAASC,KAAI,+CAA0CgF,EAAIP,MAA9C,yEAAoHO,EAAIpB,SAAW3D,KAAK,QAAQC,aAAW,UAAUP,MAAM,UAA3M,SACI,cAAC,IAAD,eAvCJ6G,WAkD5B,cAACN,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,SACI,cAACzF,EAAA,EAAD,CAAYe,MAAM,SAASM,cAAY,EAACpB,QAAQ,SAASE,UAAU,KAAnE,SACI,cAAC,IAAD,CAASjB,GAAG,UAAZ,+DAzEqC,yD,wBCnGhD0K,GAAW,I,OAAIC,GAAkB,CAC5CC,kBAAmB,CAAC,QCmBhBC,GAA0B,6CAEjB,SAASC,KAAW,IAAD,EAEwCC,eAA9DC,EAFsB,EAEtBA,OAAQC,EAFc,EAEdA,QAASC,EAFK,EAELA,QAASC,EAFJ,EAEIA,UAAWC,EAFf,EAEeA,SAAUC,EAFzB,EAEyBA,WAEvDpF,qBAAU,WACF+E,GALsB,mCAMtBM,KAGL,CAACN,IAT0B,IA0F1BO,EA1F0B,EAsBNhJ,mBAAqB,IAtBf,mBAsBvBiJ,EAtBuB,KAsBjBC,EAtBiB,KAwBxBC,EAAW,SAAUC,GACvB3G,QAAQC,IAAI,YAAa0G,IAzBC,4CA4B9B,4BAAA9I,EAAA,+EAEsBuI,EAASV,GAAUgB,GAFzC,OAEYE,EAFZ,OAGQ5G,QAAQC,IAAI,YAAa2G,GACzB5G,QAAQC,IAAI,YAAa+F,GACzBhG,QAAQC,IAAI,YAAagG,GALjC,gDAUQjG,QAAQC,IAAR,MAVR,0DA5B8B,kEA0C9B,kCAAApC,EAAA,6DAEImC,QAAQC,IAAI,UAAWiG,GACvBlG,QAAQC,IAAI,YAAakG,GACnBrI,EAAW,IAAIC,IAAOC,UAAUwC,aAAa0F,EAAQW,iBAC3D7G,QAAQC,IAAI,WAAYnC,GACpB6C,EAAW,IAAI5C,IAAOI,SACtB0H,GACAiB,GACAhJ,GAEJkC,QAAQC,IAAI,WAAYU,GACxBX,QAAQC,IAAI,UAAWgG,GAZ3B,SAeuBtF,EAASoG,cAAcd,GAf9C,cAeUxH,EAfV,OAgBIuB,QAAQC,IAAI,QAASxB,GAhBzB,UAiBoCC,QAAQC,IAAIF,EAAKG,IAAL,uCAAS,WAAOC,GAAP,mBAAAhB,EAAA,6DAC7CmJ,EAAcnI,EAAEY,WACpBO,QAAQC,IAAI,eAAgB+G,GAFqB,SAItBrG,EAAS7B,SAASkI,GAJI,cAI3CC,EAJ2C,OAKjDjH,QAAQC,IAAI,gBAAiBgH,GALoB,SAO1BhI,IAAMC,IAAI+H,GAPgB,cAO3CC,EAP2C,OASjDlH,QAAQC,IAAI,YAAaiH,GACzBlH,QAAQC,IAAI,YAAaiH,EAASzI,MAVe,kBAW1CyI,EAASzI,MAXiC,4CAAT,wDAjBhD,QAiBUsB,EAjBV,OA+BIC,QAAQC,IAAI,SAAUF,GACtB0G,EAAQ1G,GACRC,QAAQC,IAAI,QAASuG,GAjCzB,6CA1C8B,kEAgF9B,sBAAA3I,EAAA,sDACI,IACIwI,IACArG,QAAQC,IAAI,eACd,MAAOkH,GACLnH,QAAQC,IAAIkH,GALpB,4CAhF8B,sBA2J9B,OA/DIZ,EADAP,EACU,qCACN,uBACA,cAAC3E,EAAA,EAAD,CAAWE,SAAS,KAApB,SACI,eAAC/F,EAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,UAAWmK,QAAS,OAAQC,UAAW,UAA3D,UAEKrB,EAAS,mDAAqB,sCAAOC,EAASqB,UAAU,EAAG,GAA7B,cAAqCrB,EAASqB,UAAUrB,EAAS/E,OAAS,SAAmB,iDAC5H,cAACoB,EAAA,EAAD,CAAQvG,QAAQ,WAAWrB,QAlGb,2CAkGd,6BAGR,uBACA,uBAEA,cAACoB,EAAA,EAAD,CACIG,UAAU,KACVF,QAAQ,KACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,4BAQA,cAACkE,EAAA,EAAD,CAAWE,SAAS,KAApB,SACI,cAAC/F,EAAA,EAAD,CAAKC,GAAI,CAAE4L,UAAW,UAAtB,SAEKb,EAAK5H,KAAI,SAAC2I,EAAK5F,GAAN,OACN,cAACH,EAAA,EAAD,CAAMhC,MAAI,EAAarD,GAAI,GAAIC,GAAI,GAAIE,GAAI,GAA3C,SACI,eAACsF,EAAA,EAAD,WAGI,cAACG,EAAA,EAAD,CACIF,OAAO,OACP5F,UAAU,MACV2D,MAAO2H,EAAI3H,MACXoC,IAAI,YAER,eAACC,EAAA,EAAD,CAAaxG,GAAI,CAAEC,SAAU,GAA7B,UACI,cAACI,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,KAAKE,UAAU,KAAhD,2BACgBsL,EAAI1H,QAEpB,cAAC/D,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,QAAQE,UAAU,IAAnD,uBACYsL,EAAIC,OAEhB,cAAC1L,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,QAAQE,UAAU,IAAnD,2BACgBsL,EAAIE,WAEpB,cAAC3L,EAAA,EAAD,CAAYqB,cAAY,EAACpB,QAAQ,QAAQE,UAAU,IAAnD,8BACmB,IAAIc,KAAKwK,EAAIG,MAAMC,+BArBlChG,aAgC5B,cAACN,EAAA,EAAD,CAAWE,SAAS,KAApB,SACI,cAAC/F,EAAA,EAAD,CAAKC,GAAI,CAAEwB,QAAS,UAAWmK,QAAS,OAAQC,UAAW,UAA3D,SAEI,cAAC/E,EAAA,EAAD,CAAQvG,QAAQ,WAAWrB,QAvJb,2CAuJd,qCAKZ,qCACI,cAAC0G,EAAA,EAAD,IACA,+BAEI,eAACC,EAAA,EAAD,CAAW5F,GAAI,CAAE6F,GAAI,GAAKC,SAAS,KAAnC,UACI,cAACzF,EAAA,EAAD,CACIG,UAAU,KACVF,QAAQ,KACRc,MAAM,SACN/B,MAAM,OACNqC,cAAY,EALhB,0BAUCoJ,U,gCCnLrB,SAASqB,GAAW9J,GAClB,OAAO,IAAI+J,KAAK/J,GAIH,SAASgK,KAEtB,IAAMC,EAAQC,YAAY,CACxBC,WAAY,CACVC,WAAY,SAEdC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,QAEhBC,UAAW,CACTJ,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,aAAc,WAKpB,OACE,cAAC,KAAD,CAAmBZ,WAAYA,GAA/B,SACE,eAACc,EAAA,EAAD,CAAeX,MAAOA,EAAtB,UACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOlE,KAAK,IAAI8E,QAAS,cAACrL,EAAD,MACzB,cAAC,IAAD,CAAOuG,KAAK,SAAS8E,QAAS,cAAC,EAAD,MAC9B,cAAC,IAAD,CAAO9E,KAAK,SAAS8E,QAAS,cAACtD,EAAD,MAC9B,cAAC,IAAD,CAAOxB,KAAK,UAAU8E,QAAS,cAAC7C,GAAD,SAEjC,cAAC,EAAD,SCnDR,IAYe8C,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAD,UACE,cAAC,GAAD,MAEJC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.469abe24.chunk.js","sourcesContent":["import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Badge from '@mui/material/Badge';\nimport MenuItem from '@mui/material/MenuItem';\nimport Menu from '@mui/material/Menu';\nimport Twitter from '@mui/icons-material/Twitter';\nimport MoreIcon from '@mui/icons-material/MoreVert';\nimport { NavLink } from \"react-router-dom\";\n\nexport default function PrimarySearchAppBar() {\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] =\n        React.useState<null | HTMLElement>(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    // const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    //     setAnchorEl(event.currentTarget);\n    // };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    const menuId = 'primary-search-account-menu';\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Profile</MenuItem>\n            <MenuItem onClick={handleMenuClose}>My account</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }} to=\"/\">\n                    Home\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/create\">\n                    Create NFT\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/create\">\n                    MyNFTs\n                </NavLink>\n            </MenuItem>\n            <MenuItem>\n                <NavLink\n                    style={({ isActive }) => {\n                        return {\n                            color: isActive ? \"#02c692\" : \"\"\n                        };\n                    }}\n                    to=\"/profile\">\n                    Profile\n                </NavLink>\n            </MenuItem>\n            <MenuItem\n\n            >\n                <IconButton\n                    target=\"_blank\"\n                    href=\"https://twitter.com/iotabots\"\n                    size=\"large\"\n                    aria-label=\"show 1 new tweets\"\n                    color=\"inherit\"\n                >\n                    <Badge badgeContent={1} color=\"error\">\n                        <Twitter />\n                    </Badge>\n                </IconButton>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <Box sx={{ flexGrow: 1 }}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <Typography\n                        variant=\"h6\"\n                        noWrap\n                        component=\"div\"\n                        sx={{ display: { xs: 'block', sm: 'block' } }}\n                    >\n                        <NavLink\n                            className=\"nav-link\" to=\"/\">\n                            IOTABOTS\n                        </NavLink>\n                    </Typography>\n                    <Box sx={{ flexGrow: 1 }} />\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/\">\n                            Home\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/create\">\n                            Create NFT\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/MyNFTs\">\n                            MyNFTs\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        |\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <NavLink\n                            style={({ isActive }) => {\n                                return {\n                                    color: isActive ? \"#02c692\" : \"\"\n                                };\n                            }}\n                            className=\"nav-link\" to=\"/profile\">\n                            Profile\n                        </NavLink>\n                    </Box>\n                    <Box sx={{ display: { xs: 'none', md: 'flex' } }}>\n                        <IconButton target=\"_blank\" href=\"https://twitter.com/iotabots\" size=\"large\" aria-label=\"twitter\" color=\"inherit\">\n                            <Badge badgeContent={1} color=\"error\">\n                                <Twitter />\n                            </Badge>\n                        </IconButton>\n                    </Box>\n                    <Box sx={{ display: { xs: 'flex', md: 'none' } }}>\n                        <IconButton\n                            size=\"large\"\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon />\n                        </IconButton>\n                    </Box>\n                </Toolbar>\n            </AppBar>\n            {renderMobileMenu}\n            {renderMenu}\n        </Box>\n    );\n}","\nimport Link from '@mui/material/Link';\nimport Typography from '@mui/material/Typography';\nimport Box from '@mui/material/Box';\n\nexport default function Album() {\n\n    function Copyright() {\n        return (\n            <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\">\n                {'Copyright © '}\n                <Link color=\"inherit\" href=\"/\">\n                    iotabots.io\n                </Link>{' '}\n                {new Date().getFullYear()}\n                {'.'}\n            </Typography>\n        );\n    }\n\n    return (\n        <Box sx={{ bgcolor: 'background.paper', p: 6 }} component=\"footer\">\n            <Typography variant=\"h6\" align=\"center\" gutterBottom>\n                *BEE* *BOB* *BOO*\n            </Typography>\n            <Typography\n                variant=\"subtitle1\"\n                align=\"center\"\n                color=\"text.secondary\"\n                component=\"p\"\n            >\n                Follow us on <a href=\"https://twitter.com/iotabots\">Twitter</a>\n            </Typography>\n            <Copyright />\n        </Box>\n    )\n}\n\n","export const nftmarketaddress = \"0xD942bB7978810e25a99dE8D0808fcA8Aec78417D\"\nexport const nftaddress = \"0x54D79F40Fe8292FBFE3A135BA6ff85f1D12442a4\"","import Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport { NavLink } from \"react-router-dom\";\nimport { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Twitter from '@mui/icons-material/Twitter';\nimport Web3Modal from 'web3modal'\nimport CircularProgress from '@mui/material/CircularProgress';\n\nimport {\n    nftaddress, nftmarketaddress\n} from '../config'\n\nimport NFT from '../contracts/NFT.json'\nimport Market from '../contracts/NFTMarket.json'\n\nexport default function Home() {\n\n    // const [nfts, setNfts] = useState([])\n    const [nfts, setNfts] = useState<any[] | []>([])\n    const [loadingState, setLoadingState] = useState('not-loaded')\n    useEffect(() => {\n        loadNFTs()\n    }, [])\n    async function loadNFTs() {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://evm.wasp.sc.iota.org\")\n\n        // const provider = new ethers.providers.JsonRpcProvider()\n        const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n        const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, provider)\n\n        const data = await marketContract.fetchMarketItems()\n\n        const items = await Promise.all(data.map(async (i: any) => {\n            const tokenUri = await tokenContract.tokenURI(i.tokenId)\n            const meta = await axios.get(tokenUri)\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.data.image,\n                name: meta.data.name,\n                description: meta.data.description,\n            }\n            return item\n        }))\n\n        console.log(\"nfts\", items)\n        setNfts(items.reverse())\n        setLoadingState('loaded')\n    }\n\n    async function buyNft(nft: any) {\n\n        console.log(\"nft\", nft)\n        \n        const web3Modal = new Web3Modal()\n        const connection = await web3Modal.connect()\n        const provider = new ethers.providers.Web3Provider(connection)\n        const signer = provider.getSigner()\n        const contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n        const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')\n        \n        const transaction = await contract.createMarketSale(nftaddress, nft.tokenId, {\n            value: price\n        })\n        console.log(\"transaction\", transaction)\n        await transaction.wait()\n        loadNFTs()\n    }\n\n    if (loadingState === 'loaded' && !nfts.length) return (<h1>No items in marketplace</h1>)\n    if (loadingState === 'not-loaded' ) return ( <> <h1>Loading</h1><CircularProgress /></>)\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Community Marketplace\n                    </Typography>\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n                        {nfts.map((nft, index) => (\n                            <Grid item key={index} xs={12} sm={6} md={6}>\n                                <Card\n                                    sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                                >\n                                    <CardMedia\n                                        component=\"img\"\n                                        sx={{\n                                            // 16:9\n                                            // pt: '56.25%',\n                                        }}\n                                        image={nft.image}\n                                        alt=\"IOTABOT\"\n                                    />\n                                    <CardContent sx={{ flexGrow: 1 }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h3\">\n                                            {nft.name}\n                                        </Typography>\n                                        <Typography paragraph>\n                                            {nft.description}\n                                        </Typography>\n                                        <br />\n                                        <hr />\n                                        <br />\n                                        <Typography paragraph>\n                                            Price:\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                                            {nft.price} MIOTA\n                                        </Typography>\n                                    </CardContent>\n                                    <CardActions disableSpacing>\n                                        <Box\n                                            display=\"flex\"\n                                            justifyContent=\"space-between\"\n                                            className=\"card-button\"\n                                            // flexDirection=\"column\"\n                                        >\n                                            <Button onClick={() => buyNft(nft)} variant=\"outlined\" size=\"large\">BUY</Button>\n                                            <IconButton target=\"_blank\" href={`https://twitter.com/intent/tweet?url=${nft.image}&hashtags=IOTA,IOTABOTS,NFT&text=Community%20IOTABOTS%20Nr.%20${nft.tokenId}`} size=\"large\" aria-label=\"twitter\" color=\"inherit\">\n                                                <Twitter />\n                                            </IconButton>\n                                        </Box>\n\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        ))}\n                    </Grid>\n\n                </Container>\n                <Container sx={{ py: 8 }} maxWidth=\"md\"  >\n                    <Typography align=\"center\" gutterBottom variant=\"button\" component=\"h1\">\n                        <NavLink to=\"/create\">\n                            Create your IOTABOTS Community NFT now!\n                        </NavLink>\n                    </Typography>\n                </Container>\n\n            </main>\n        </>\n    );\n}","import CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { ethers } from \"ethers\";\nimport Button from '@mui/material/Button';\nimport Input from '@mui/material/Input';\nimport Box from '@mui/material/Box';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Grid from '@mui/material/Grid';\n\nimport { useState } from 'react'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\n\nimport Web3Modal from 'web3modal'\nimport { useNavigate } from \"react-router-dom\";\n\n\nimport {\n    nftaddress, nftmarketaddress\n} from '../config'\n\nimport NFT from '../contracts/NFT.json'\nimport Market from '../contracts/NFTMarket.json'\n\nexport default function Games() {\n    const client = ipfsHttpClient({ url: 'https://ipfs.infura.io:5001/api/v0' })\n    const navigate = useNavigate();\n\n    const [loading, setLoading] = useState(false)\n    const [loadingMessage, setLoadingMessage] = useState(\"\")\n    const [fileUrl, setFileUrl] = useState<null | string>(null)\n    const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\n\n    async function onChange(e: any) {\n        const file = e.target.files[0]\n        try {\n            const added = await client.add(\n                file,\n                {\n                    progress: (prog: any) => console.log(`received: ${prog}`)\n                }\n            )\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            setFileUrl(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n    async function createMarket() {\n        setLoadingMessage(\"create NFT...\")\n        setLoading(true);\n        const { name, description, price } = formInput\n        if (!name || !description || !price || !fileUrl) return\n        /* first, upload to IPFS */\n        const data = JSON.stringify({\n            name, description, image: fileUrl\n        })\n        try {\n            const added = await client.add(data)\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\n            /* after file is uploaded to IPFS, pass the URL to save it on Polygon */\n            createSale(url)\n        } catch (error) {\n            console.log('Error uploading file: ', error)\n        }\n    }\n\n    async function createSale(url: any) {\n        const web3Modal = new Web3Modal()\n        const connection = await web3Modal.connect()\n        const provider = new ethers.providers.Web3Provider(connection)\n        const signer = provider.getSigner()\n        \n        /* next, create the item */\n        let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\n        let transaction = await contract.createToken(url)\n        let tx = await transaction.wait()\n        let event = tx.events[0]\n        let value = event.args[2]\n        let tokenId = value.toNumber()\n        setLoadingMessage(\"create sale...\")\n\n        const price = ethers.utils.parseUnits(formInput.price, 'ether')\n\n        /* then list the item for sale on the marketplace */\n        contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n        let listingPrice = await contract.getListingPrice()\n        listingPrice = listingPrice.toString()\n\n        transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })\n        await transaction.wait()\n        setLoading(false);\n        navigate(\"/\");\n\n    }\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        IOTABOTS COMMUNITY NFTs\n                    </Typography>\n                    {/* End hero unit */}\n                </Container>\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Grid\n                        container\n                        spacing={0}\n                        direction=\"row\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                    // style={{ minHeight: '100vh' }}\n                    >\n                        <Grid item xs={8}>\n\n                            <Typography\n                                component=\"p\"\n                                variant=\"body1\"\n                                align=\"center\"\n                                color=\"#fff\"\n                                gutterBottom\n                            >\n                                Mint your own IOTABOTS Community NFT for free!\n                            </Typography>\n                            <br />\n                            <br />\n                            <Box\n                                component=\"form\"\n                                sx={{\n                                    '& > :not(style)': { m: 1, margin: '20px' },\n                                }}\n                                noValidate\n                                autoComplete=\"off\"\n                            >\n                                <Input\n                                    disabled={loading}\n                                    placeholder=\"Bot Name\"\n                                    className=\"\"\n                                    onChange={(e: any) => updateFormInput({ ...formInput, name: e.target.value })}\n                                />\n                                <Input\n                                    disabled={loading}\n                                    placeholder=\"Bot Description\"\n                                    className=\"\"\n                                    onChange={(e: any) => updateFormInput({ ...formInput, description: e.target.value })}\n                                />\n                                <Input\n                                    disabled={loading}\n                                    type=\"number\"\n                                    placeholder=\"Bot Price in MIOTA\"\n                                    className=\"\"\n                                    onChange={(e: any) => updateFormInput({ ...formInput, price: e.target.value })}\n                                />\n                                <Input\n                                    disabled={loading}\n                                    type=\"file\"\n                                    name=\"Asset\"\n                                    className=\"my-4\"\n                                    onChange={onChange}\n                                />\n                                {\n                                    fileUrl && (\n                                        <img className=\"rounded mt-4\" alt=\"upload\" width=\"350\" src={fileUrl} />\n                                    )\n                                }\n                                <br />\n                                <br />\n                                <Box\n                                    display=\"flex\"\n                                    flexDirection=\"column\"\n                                    alignItems=\"center\"\n                                    justifyContent=\"center\"\n                                >\n                                    \n                                    { loading ? <CircularProgress color=\"primary\" size=\"5em\" /> : null }\n                                    \n                                    <Typography\n                                        component=\"p\"\n                                        variant=\"body1\"\n                                        align=\"center\"\n                                        color=\"#fff\"\n                                        gutterBottom\n                                    >\n                                    { loading ? loadingMessage : \"\" }                                    \n                                    </Typography>\n                                    <br />\n                                    <Button disabled={loading} variant=\"contained\" onClick={createMarket} className=\"font-bold mt-4 bg-pink-500 text-white rounded p-4 shadow-lg\">\n                                        Create NFT\n                                    </Button>\n                                    <br />\n                                    <br />\n                                    <Typography\n                                        component=\"p\"\n                                        variant=\"body1\"\n                                        align=\"center\"\n                                        color=\"#fff\"\n                                        gutterBottom\n                                    >\n                                        You need to confirm twice on your Metamask Wallet.\n                                    </Typography>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </Grid>\n\n                </Container>\n            </main>\n        </>\n    );\n}","import Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport Grid from '@mui/material/Grid';\nimport Typography from '@mui/material/Typography';\nimport CardActions from '@mui/material/CardActions';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport { NavLink } from \"react-router-dom\";\nimport { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Twitter from '@mui/icons-material/Twitter';\nimport Web3Modal from 'web3modal'\nimport CircularProgress from '@mui/material/CircularProgress';\n\n\nimport {\n  nftmarketaddress, nftaddress\n} from '../config'\n\nimport NFT from '../contracts/NFT.json'\nimport Market from '../contracts/NFTMarket.json'\n\nexport default function MyNFTs() {\n  const [nfts, setNfts] = useState<any[] | []>([])\n  const [loadingState, setLoadingState] = useState('not-loaded')\n  useEffect(() => {\n    loadNFTs()\n  }, [])\n  async function loadNFTs() {\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      cacheProvider: true,\n    })\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner()\n      \n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n    const data = await marketContract.fetchMyNFTs()\n    \n    const items = await Promise.all(data.map(async (i:any) => {\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\n      const meta = await axios.get(tokenUri)\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.data.image,\n      }\n      return item\n    }))\n    setNfts(items)\n    setLoadingState('loaded') \n  }\n  async function listNFT(nft: any) {\n        const web3Modal = new Web3Modal()\n        const connection = await web3Modal.connect()\n        const provider = new ethers.providers.Web3Provider(connection)\n        const signer = provider.getSigner()\n        \n        let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\n        const price = ethers.utils.parseUnits('0', 'ether')\n\n        /* then list the item for sale on the marketplace */\n        contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n        let listingPrice = await contract.getListingPrice()\n        listingPrice = listingPrice.toString()\n\n        let transaction = await contract.createMarketItem(nftaddress, nft.tokenId, price, { value: listingPrice })\n        await transaction.wait()\n        //setLoading(false);\n        //navigate(\"/\");\n\n    }\n  // if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl\">No assets owned</h1>)\n  // return (\n  //   <div className=\"flex justify-center\">\n  //     <div className=\"p-4\">\n  //       <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\n  //         {\n  //           nfts.map((nft, i) => (\n  //             <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\n  //               <img src={nft.image} className=\"rounded\" />\n  //               <div className=\"p-4 bg-black\">\n  //                 <p className=\"text-2xl font-bold text-white\">Price - {nft.price} Eth</p>\n  //               </div>\n  //             </div>\n  //           ))\n  //         }\n  //       </div>\n  //     </div>\n  //   </div>\n  // )\n      if (loadingState === 'loaded' && !nfts.length) return (<h1>No items in marketplace</h1>)\n    if (loadingState === 'not-loaded' ) return ( <> <h1>Loading</h1><CircularProgress /></>)\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Community Marketplace\n                    </Typography>\n                    {/* End hero unit */}\n                    <Grid container spacing={4}>\n                        {nfts.map((nft, index) => (\n                            <Grid item key={index} xs={12} sm={6} md={6}>\n                                <Card\n                                    sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}\n                                >\n                                    <CardMedia\n                                        component=\"img\"\n                                        sx={{\n                                            // 16:9\n                                            // pt: '56.25%',\n                                        }}\n                                        image={nft.image}\n                                        alt=\"IOTABOT\"\n                                    />\n                                    <CardContent sx={{ flexGrow: 1 }}>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h3\">\n                                            {nft.name}\n                                        </Typography>\n                                        <Typography paragraph>\n                                            {nft.description}\n                                        </Typography>\n                                        <br />\n                                        <hr />\n                                        <br />\n                                        <Typography paragraph>\n                                            Price:\n                                        </Typography>\n                                        <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                                            {nft.price} MIOTA\n                                        </Typography>\n                                    </CardContent>\n                                    <CardActions disableSpacing>\n                                        <Box\n                                            display=\"flex\"\n                                            justifyContent=\"space-between\"\n                                            className=\"card-button\"\n                                            // flexDirection=\"column\"\n                                        >\n                                            <Button onClick={() => listNFT(nft)} variant=\"outlined\" size=\"large\">SELL</Button>\n                                            <IconButton target=\"_blank\" href={`https://twitter.com/intent/tweet?url=${nft.image}&hashtags=IOTA,IOTABOTS,NFT&text=Community%20IOTABOTS%20Nr.%20${nft.tokenId}`} size=\"large\" aria-label=\"twitter\" color=\"inherit\">\n                                                <Twitter />\n                                            </IconButton>\n                                        </Box>\n\n                                    </CardActions>\n                                </Card>\n                            </Grid>\n                        ))}\n                    </Grid>\n\n                </Container>\n                <Container sx={{ py: 8 }} maxWidth=\"md\"  >\n                    <Typography align=\"center\" gutterBottom variant=\"button\" component=\"h1\">\n                        <NavLink to=\"/create\">\n                            Create your IOTABOTS Community NFT now!\n                        </NavLink>\n                    </Typography>\n                </Container>\n\n            </main>\n        </>\n    );\n}","import { InjectedConnector } from '@web3-react/injected-connector'\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [1074],\n})","import CssBaseline from '@mui/material/CssBaseline';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { useWeb3React } from \"@web3-react/core\"\n\nimport { ethers } from \"ethers\";\n\nimport IOTABOTS_ABI from \"../contracts/iotabots_abi.json\";\n\nimport { injected } from \"../components/wallet/connectors\"\nimport Button from '@mui/material/Button';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport CardMedia from '@mui/material/CardMedia';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\n\nimport axios from 'axios'\n\nimport { useState, useEffect } from 'react';\n\n// const iotabotsContractAddress = \"0x6c2D60145cDD0396bd03298693495bf98fcdD93E\"; // LIVE\nconst iotabotsContractAddress = \"0x639D119919047EA5b52dAfFD17B30B5A5fc177B4\"; // Test\n\nexport default function Profile() {\n\n    const { active, account, library, connector, activate, deactivate } = useWeb3React()\n\n    useEffect(() => {\n        if (active) {\n            loadBots()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [active])\n\n    interface Bot {\n        attributes: Array<object>;\n        date: number;\n        description: string;\n        dna: string;\n        edition: number;\n        image: string;\n        name: string;\n    }\n\n\n    const [bots, setBots] = useState<Array<any>>([]);\n\n    const callback = function (err: any) {\n        console.log(\"callback1\", err)\n    }\n\n    async function connect() {\n        try {\n            let x = await activate(injected, callback)\n            console.log(\"activated\", x)\n            console.log(\"activated\", active)\n            console.log(\"activated\", account)\n            // useEffect(() => {\n            //     loadBots()\n            // }, [])\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n    async function loadBots() {\n        // await connect();\n        console.log(\"library\", library)\n        console.log(\"connector\", connector)\n        const provider = new ethers.providers.Web3Provider(library.currentProvider)\n        console.log(\"provider\", provider)\n        let contract = new ethers.Contract(\n            iotabotsContractAddress,\n            IOTABOTS_ABI,\n            provider\n        )\n        console.log(\"contract\", contract)\n        console.log(\"account\", account)\n\n\n        const data = await contract.walletOfOwner(account)\n        console.log(\"data:\", data)\n        const items: Array<Bot> = await Promise.all(data.map(async (i: any) => {\n            let token_index = i.toNumber()\n            console.log(\"token_index:\", token_index)\n\n            const metadata_url = await contract.tokenURI(token_index)\n            console.log(\"metadata_url:\", metadata_url)\n\n            const metadata = await axios.get(metadata_url)\n\n            console.log(\"metadata:\", metadata)\n            console.log(\"metadata:\", metadata.data)\n            return metadata.data\n        }))\n\n        console.log(\"items:\", items)\n        setBots(items)\n        console.log(\"bots:\", bots)\n        // const tokenContract = new ethers.Contract(iotabotsContractAddress, IOTABOTS_ABI, provider)\n        // console.log(\"tokenContract:\", tokenContract)\n    }\n\n    async function disconnect() {\n        try {\n            deactivate()\n            console.log(\"deactivated\")\n        } catch (ex) {\n            console.log(ex)\n        }\n    }\n\n\n    var content;\n    if (active) {\n        content = <>\n            <br />\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    {active ? <span>Connected with <b>{`${account!.substring(0, 6)}...${account!.substring(account!.length - 4)}`}</b></span> : <span>Not connected</span>}\n                    <Button variant=\"outlined\" onClick={disconnect} >Disconnect</Button>\n                </Box>\n            </Container>\n            <hr />\n            <br />\n\n            <Typography\n                component=\"h3\"\n                variant=\"h3\"\n                align=\"center\"\n                color=\"#fff\"\n                gutterBottom\n            >\n                Your IOTABOTS:</Typography>\n            <Container maxWidth=\"sm\">\n                <Box sx={{ textAlign: 'center'}} >\n\n                    {bots.map((bot, index) => (\n                        <Grid item key={index} xs={12} sm={12} md={12}>\n                            <Card\n                            // sx={{ width: '100%', display: 'flex', flexDirection: 'column' }}\n                            >\n                                <CardMedia\n                                    height=\"100%\"\n                                    component=\"img\"\n                                    image={bot.image}\n                                    alt=\"IOTABOT\"\n                                />\n                                <CardContent sx={{ flexGrow: 1 }}>\n                                    <Typography gutterBottom variant=\"h6\" component=\"h6\">\n                                        {`IOTABOT ${bot.name}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`DNA ${bot.dna}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`Edition ${bot.edition}`}\n                                    </Typography>\n                                    <Typography gutterBottom variant=\"body1\" component=\"p\">\n                                        {`Created on ${new Date(bot.date).toLocaleDateString()}`}\n                                    </Typography>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    ))}\n                </Box>\n            </Container>\n        </>;\n    } else {\n        content =\n            <Container maxWidth=\"sm\">\n                <Box sx={{ bgcolor: '#cfe8fc', padding: \"10px\", textAlign: \"center\" }} >\n\n                    <Button variant=\"outlined\" onClick={connect} >Connect to MetaMask</Button></Box>\n            </Container>;\n    }\n\n    return (\n        <>\n            <CssBaseline />\n            <main>\n                {/* Hero unit */}\n                <Container sx={{ py: 8 }} maxWidth=\"md\">\n                    <Typography\n                        component=\"h1\"\n                        variant=\"h2\"\n                        align=\"center\"\n                        color=\"#fff\"\n                        gutterBottom\n                    >\n                        Your Profile\n                    </Typography>\n                    {/* End hero unit */}\n                    {content}\n                </Container>\n            </main>\n        </>\n    );\n}","import { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { Routes, Route } from \"react-router-dom\";\n\nimport Navigation from './components/Navigation'\nimport Footer from './components/Footer'\n\nimport Home from './pages/Home'\nimport Create from './pages/Create'\nimport MyNFTs from './pages/MyNFTs'\nimport Profile from './pages/Profile'\n\nimport './App.css';\n\nimport { Web3ReactProvider } from '@web3-react/core'\nimport Web3 from 'web3'\n\nfunction getLibrary(provider: any) {\n  return new Web3(provider)\n}\n\n\nexport default function App() {\n\n  const theme = createTheme({\n    typography: {\n      fontFamily: 'coder',\n    },\n    palette: {\n      primary: {\n        light: '#757ce8',\n        main: '#2b2b2b',\n        dark: '#002884',\n        contrastText: '#fff',\n      },\n      secondary: {\n        light: '#ff7961',\n        main: '#f44336',\n        dark: '#ba000d',\n        contrastText: '#000',\n      },\n    },\n  });\n\n  return (\n    <Web3ReactProvider getLibrary={getLibrary}>\n      <ThemeProvider theme={theme}>\n        <Navigation />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"create\" element={<Create />} />\n          <Route path=\"MyNFTs\" element={<MyNFTs />} />\n          <Route path=\"profile\" element={<Profile />} />\n        </Routes>\n        <Footer />\n      </ThemeProvider>\n    </Web3ReactProvider>\n  );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nReactDOM.render(\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}